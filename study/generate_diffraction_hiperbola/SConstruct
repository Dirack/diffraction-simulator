# coding: utf-8
#
# SConstruct (Madagascar script)
# 
# Purpose: Simulate a diffraction hiperbola.
# 
# Site: http://www.dirackslounge.online
# 
# Version 1.0
# 
# Programer: Rodolfo Dirack 15/02/2020
# 
# Email: rodolfo_profissional@hotmail.com
# 
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

from rsf.proj import *
import rsf.recipes.stack as stack
import math

# Return a list of spike positions in a
# string format suitable for sfspike
def formatListSpikes(lst):
	
	return str(lst).strip('[]').replace(' ','')

# Generate a simulated zero offset section making a convolution of a line
# of spikes with a ricker pulse
Flow("spike",None,
	"""
	spike n1=1000 n2=1000 d1=0.004 d2=0.0125 o1=0 o2=0 k1=250 k2=0 l2=1000 mag=1 nsp=1
	""")

Flow("simulatedZeroOffset","spike",
	"""
	ricker1 frequency=10
	""")
	
Plot("simulatedZeroOffset",
	"""
	grey title="Simulated zero offset section"
	""")

# Generate a diffraction hiperbola with a convolution
# between a set of spikes with a ricker pulse
t0 = 1
v = 1.5
td = []
dt = 0.004
dx = 0.0125
x0 = 1.5
xd = []

# Calculate the first hiperbola
for i in range(200):
	
	x = x0 + dx*(i-100)

	xd.append(round(x/dx))
	td.append(round((t0*t0 + ((x-x0)*(x-x0))/(v*v))/dt))

# shift the hiperbola to form the linearized reflection event
# the hiperbolas shift sampling is 0.5km = 40 * 0.0125km
spikeFiles = []
hiperbolaFiles = []
for j in range(15):

	hiperbolaSpikes = "hiperbolaSpikes%d" % j

	hiperbolas = "hiperbola%d" % j

	xd = map(lambda l: l + 40,xd) 

	Flow(hiperbolaSpikes,None,
		"""
		spike n1=1000 n2=1000 d1=0.004 d2=0.0125 o1=0 o2=0 k1=%s k2=%s nsp=%d
		""" % (formatListSpikes(td),formatListSpikes(xd),len(xd)))

	Flow(hiperbolas,hiperbolaSpikes,
		"""
		ricker1 frequency=10
		""")

	hiperbolaFiles.append(hiperbolas)

# Add generated hiperbolas in just one section
Flow("hiperbola", hiperbolaFiles,
	"""
	add ${SOURCES[0:%d]} 
	""" % len(hiperbolaFiles))

Plot("hiperbola",
	"""
	grey title="Diffraction hiperbola"
	""")

# Add reflection and diffraction hiperbolas
Flow("diffResponse","simulatedZeroOffset hiperbola",
	"""
	add ${SOURCES[1]} scale=1,1
	""")

Plot("diffResponse",
	"""
	grey title="Simulated diffraction response"
	""")

# Get the dominant slope from data
Flow("slope","diffResponse",
	'''
	dip rect1=1 rect2=3
	''')

# Measure focusing in only hiperbola data
Flow("focusMeasure","hiperbola",
	'''
	focus rect1=1 rect2=3 |
	math output="1/abs(input)"
	''')

End()
